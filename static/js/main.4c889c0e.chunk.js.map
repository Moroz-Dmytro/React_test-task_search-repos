{"version":3,"sources":["components/SearchHistory/SearchHistory.tsx","api/loadRepos.ts","components/ReposList/ReposList.tsx","App.tsx","index.tsx"],"names":["SearchHistory","historyFromLS","localStorage","getItem","historyItems","JSON","parse","className","length","map","item","uuidv4","getData","query","a","fetch","response","ok","Promise","reject","Error","status","statusText","json","loadRepos","items","ReposList","props","useState","loading","setLoading","error","setError","inputCheck","setInputCheck","repos","setRepos","useEffect","reposFromApi","repo","href","html_url","target","rel","name","language","description","id","App","setQuery","queryToSearch","setQueryToSearch","str","historyArr","shift","push","setItem","stringify","applyQuery","useCallback","debounce","value","onChange","event","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4c889c0e.chunk.js","sourcesContent":["import React from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport './SearchHistory.scss';\n\nexport const SearchHistory: React.FC = () => {\n  const historyFromLS = localStorage.getItem('repos-search-key');\n  const historyItems = historyFromLS ? JSON.parse(historyFromLS) : [];\n\n  return (\n    <section className=\"history App__history\">\n      <h6>Search history:</h6>\n      {historyItems.length ? (\n        <ul className=\"history__list\">\n          {\n            historyItems.map((item: string) => (\n              <li key={uuidv4()} className=\"history__link\">\n                {item}\n              </li>\n            ))\n          }\n        </ul>\n      ) : (\n        <h5>History is empty</h5>\n      )}\n    </section>\n  );\n};\n","const getData = async (query: string): Promise<ApiResponse> => {\n  const response = await fetch(`https://api.github.com/search/repositories?q=${query}&per_page=50`);\n\n  if (!response.ok) {\n    return Promise.reject(new Error(`${response.status} - ${response.statusText}`));\n  }\n\n  return response.json();\n};\n\nexport const loadRepos = async (query: string) => {\n  const response = await getData(query);\n\n  return response.items;\n};\n","import React, { useState, useEffect } from 'react';\nimport { loadRepos } from '../../api/loadRepos';\n\nimport './ReposList.scss';\n\ninterface Props {\n  query: string;\n}\n\nexport const ReposList: React.FC<Props> = (props) => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const [inputCheck, setInputCheck] = useState(false);\n  const [repos, setRepos] = useState<Repositories[]>([]);\n\n  const { query } = props;\n\n  useEffect(() => {\n    (async () => {\n      try {\n        if (!query) {\n          return;\n        }\n\n        setLoading(true);\n\n        const reposFromApi = await loadRepos(query);\n\n        setInputCheck(true);\n        setLoading(false);\n        setError(false);\n        setRepos(reposFromApi);\n      } catch {\n        setLoading(false);\n        setError(true);\n      }\n    })();\n  }, [query]);\n\n  return (\n    <>\n      {loading && (\n        <h2>Please, wait. Loading...</h2>\n      )}\n      {!loading && (\n        error ? (\n          <h2>Ups... Something went wrong :(</h2>\n        ) : (\n          <>\n            {!repos.length && inputCheck && (\n              <h2>There are no repos with such name</h2>\n            )}\n            {!!repos.length && (\n              <ul className=\"list\">\n                {repos.map(repo => (\n                  <li key={repo.id} className=\"card\">\n                    <div className=\"card-body\">\n                      <a\n                        href={repo.html_url}\n                        className=\"card-title card__title\"\n                        target=\"_blank\"\n                        rel=\"noreferrer\"\n                      >\n                        {repo.name}\n                      </a>\n                      <div className=\"card-text\">\n                        {'Language: '}\n                        <span className=\"card__description\">{repo.language || 'Not defined'}</span>\n                      </div>\n                      <div className=\"card-text\">\n                        {'Description: '}\n                        <span className=\"card__description\">{repo.description}</span>\n                      </div>\n                    </div>\n                  </li>\n                ))}\n              </ul>\n            )}\n          </>\n        )\n      )}\n    </>\n  );\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.scss';\n\nimport debounce from 'lodash.debounce';\nimport { SearchHistory } from './components/SearchHistory';\nimport { ReposList } from './components/ReposList';\n\nexport const App: React.FC = () => {\n  const [query, setQuery] = useState('');\n  const [queryToSearch, setQueryToSearch] = useState('');\n\n  useEffect(() => {\n    if (!queryToSearch) {\n      return;\n    }\n\n    const str = localStorage.getItem('repos-search-key');\n    const historyArr = str ? JSON.parse(str) : [];\n\n    if (historyArr.length >= 5) {\n      historyArr.shift();\n    }\n\n    historyArr.push(queryToSearch);\n\n    localStorage.setItem('repos-search-key', JSON.stringify(historyArr));\n  }, [queryToSearch]);\n\n  const applyQuery = useCallback(debounce((value: string) => {\n    if (!value) {\n      return;\n    }\n\n    setQueryToSearch(value);\n  }, 500), []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <h1 className=\"App__title\">Github repos search app</h1>\n      </header>\n      <main className=\"App__main\">\n        <div className=\"App__search\">\n          <input\n            className=\"input-field\"\n            value={query}\n            onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n              setQuery(event.target.value);\n              applyQuery(event.target.value);\n            }}\n          />\n          <SearchHistory />\n        </div>\n        <ReposList query={queryToSearch} />\n      </main>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}